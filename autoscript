#!/bin/bash

EDITOR=nano

waitakey() { 
echo
echo "press a key"
read key
}

apt-get install nginx
apt-get install php5-common php5-fpm php5-cli php5-json php5-mysql php5-curl php5-intl php5-mcrypt php5-memcache php-xml-parser php-pear
mkdir -p /etc/ssl/nginx/

echo "upstream php-handler {
  server 127.0.0.1:9000;
  #server unix:/var/run/php5-fpm.sock;
  }" > /etc/nginx/sites-enabled/php-fpm

echo "server {
  listen 80;
  server_name _;
  root /var/www/html;
  index index.html;

  }
  
  server {
  listen box.local:80;
  server_name box.local;
  root /var/www/html;
  index index.html;

  }
  
  " > /etc/nginx/sites-enabled/default
  
service nginx restart

#TOR
apt-get install tor
service tor stop
mkdir -p /var/lib/tor/hidden_service/{yacy,owncloud,prosody,friendica,box}
chown debian-tor:debian-tor /var/lib/tor/hidden_service/{yacy,owncloud,prosody,friendica,box} -R

echo "Change RUN_DAEMON to yes"
# waitakey
# $EDITOR /etc/default/tor 
sed "s~RUN_DAEMON=.*~RUN_DAEMON=\"yes\"~g" -i /etc/default/tor 


rm -f /etc/tor/torrc
cp /usr/share/tor/tor-service-defaults-torrc /etc/tor/torrc

echo "
HiddenServiceDir /var/lib/tor/hidden_service/yacy
HiddenServicePort 80 127.0.0.1:8090

HiddenServiceDir /var/lib/tor/hidden_service/owncloud
HiddenServicePort 80 127.0.0.1:7070
HiddenServicePort 443 127.0.0.1:443

HiddenServiceDir /var/lib/tor/hidden_service/friendica
HiddenServicePort 80 127.0.0.1:8181
HiddenServicePort 443 127.0.0.1:443

HiddenServiceDir /var/lib/tor/hidden_service/prosody
HiddenServicePort 5222 127.0.0.1:5222
HiddenServicePort 5269 127.0.0.1:5269


DNSPort   9053
DNSListenAddress 10.0.0.1
VirtualAddrNetworkIPv4 10.192.0.0/16
AutomapHostsOnResolve 1
TransPort 9040
TransListenAddress 10.0.0.1
SocksPort 9050 # what port to open for local application connectio$
SocksBindAddress 127.0.0.1 # accept connections only from localhost
AllowUnverifiedNodes middle,rendezvous
#Log notice syslog" >>  /etc/tor/torrc 


service tor start

sleep 5

#i2p
apt-get install i2p

echo "Change RUN_DAEMON to true"
# waitakey
# $EDITOR /etc/default/i2p
sed "s~RUN_DAEMON=.*~RUN_DAEMON=\"true\"~g" -i /etc/default/i2p 


service i2p restart


cat << EOF > /etc/nginx/sites-enabled/i2p 
server {
        listen i2p.local:80;
        server_name i2p.local;


location / {
    proxy_pass       http://127.0.0.1:7657;
    proxy_set_header Host      \$host;
    proxy_set_header X-Real-IP \$remote_addr;
  }

}
EOF

service nginx restart



#unbound
apt-get install unbound

echo '# Unbound configuration file for Debian.
#
# See the unbound.conf(5) man page.
#
# See /usr/share/doc/unbound/examples/unbound.conf for a commented
# reference config file.

server:
    # The following line will configure unbound to perform cryptographic
    # DNSSEC validation using the root trust anchor.
    interface: 0.0.0.0
    access-control: 10.0.0.0/8 allow
    access-control: 127.0.0.1/8 allow
    access-control: 0.0.0.0/0 refuse
#    access-control
#    auto-trust-anchor-file: "/var/lib/unbound/root.key"
    do-not-query-localhost: no
#domain-insecure: "onion"
#private-domain: "onion"

#Local destinations
local-zone: "local." static
local-data: "communitycube.local. IN A 10.0.0.1"
local-data: "i2p.local. IN A 10.0.0.1"
local-data: "tahoe.local. IN A 10.0.0.1"' > /etc/unbound/unbound.conf 

for i in $(ls /var/lib/tor/hidden_service/)
do

cat << EOF >>  /etc/unbound/unbound.conf 
local-data: "$i.local.  IN A 10.0.0.1"
EOF

done

for i in $(ls /var/lib/tor/hidden_service/)
do

hn="$(cat /var/lib/tor/hidden_service/$i/hostname 2>/dev/null)"

if [ -n "$hn" ]; then
cat << EOF >>  /etc/unbound/unbound.conf 

local-zone: "$hn." static
local-data: "$hn. IN A 10.0.0.1"
EOF

fi

done

echo '
#I2P domains
local-zone: "i2p" redirect
local-data: "i2p A 10.191.0.1"

#Forward rest of zones to TOR
forward-zone:
    name: "."
    forward-addr: 10.0.0.1@9053' >> /etc/unbound/unbound.conf 

service unbound restart

#owncloud
apt-get install owncloud apache2-mpm-prefork- apache2-utils- apache2.2-bin- apache2.2-common-

echo "Change to"
echo "  listen = localhost:9000"
sed "s~listen =.*~listen = localhost:9000~g" -i /etc/php5/fpm/pool.d/www.conf 
# waitakey
# $EDITOR /etc/php5/fpm/pool.d/www.conf 

echo "Change upload_max_filesize and post_max_size to 2000M"
# waitakey 
sed "s~upload_max_filesize =.*~upload_max_filesize = 2000M~g" -i /etc/php5/fpm/php.ini
sed "s~upload_max_filesize =.*~upload_max_filesize = 2000M~g" -i /etc/php5/cli/php.ini 
sed "s~post_max_size =.*~post_max_size = 2000M~g" -i /etc/php5/fpm/php.ini
sed "s~post_max_size =.*~post_max_size = 2000M~g" -i /etc/php5/cli/php.ini 
# $EDITOR  /etc/php5/fpm/php.ini /etc/php5/cli/php.ini 

onion=`cat /var/lib/tor/hidden_service/owncloud/hostname`

cat << EOF > /etc/nginx/sites-enabled/owncloud 
server {
  listen $onion:80;
  server_name $onion;
  return 301 https://\$server_name\$request_uri;
  }
  

server {
  listen $onion:7070;
  server_name $onion;
  return 301 https://\$server_name\$request_uri;
  }

server {
  listen $onion:443;
  ssl on;
  server_name $onion;
  ssl_certificate /etc/ssl/nginx/$onion.crt;
  ssl_certificate_key /etc/ssl/nginx/$onion.key;

  # Path to the root of your installation
  root /var/www/owncloud/;
  # set max upload size
  client_max_body_size 10G;
  fastcgi_buffers 64 4K;

  rewrite ^/caldav(.*)\$ /remote.php/caldav\$1 redirect;
  rewrite ^/carddav(.*)\$ /remote.php/carddav\$1 redirect;
  rewrite ^/webdav(.*)\$ /remote.php/webdav\$1 redirect;

  index index.php;
  error_page 403 /core/templates/403.php;
  error_page 404 /core/templates/404.php;

  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
    }

  location ~ ^/(?:\.htaccess|data|config|db_structure\.xml|README){
    deny all;
    }

  location / {
   # The following 2 rules are only needed with webfinger
   rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
   rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;

   rewrite ^/.well-known/carddav /remote.php/carddav/ redirect;
   rewrite ^/.well-known/caldav /remote.php/caldav/ redirect;

   rewrite ^(/core/doc/[^\/]+/)\$ \$1/index.html;

   try_files \$uri \$uri/ /index.php;
   }

   location ~ \.php(?:\$|/) {
   fastcgi_split_path_info ^(.+\.php)(/.+)\$;
   include fastcgi_params;
   fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
   fastcgi_param PATH_INFO \$fastcgi_path_info;
   fastcgi_param HTTPS on;
   fastcgi_pass php-handler;
   }

   # Optional: set long EXPIRES header on static assets
   location ~* \.(?:jpg|jpeg|gif|bmp|ico|png|css|js|swf)\$ {
       expires 30d;
       # Optional: Don't log access to assets
         access_log off;
   }

  }
EOF

if [ ! -e /etc/ssl/nginx/$onion.key -o ! -e /etc/ssl/nginx/$onion.csr -o ! -e  /etc/ssl/nginx/$onion.crt ]; then
    openssl genrsa -des3 -out /etc/ssl/nginx/$onion.key 2048
    openssl req -new -key /etc/ssl/nginx/$onion.key -out /etc/ssl/nginx/$onion.csr
    cp /etc/ssl/nginx/$onion.key /etc/ssl/nginx/$onion.key.org
    openssl rsa -in /etc/ssl/nginx/$onion.key.org -out /etc/ssl/nginx/$onion.key
    openssl x509 -req -days 365 -in /etc/ssl/nginx/$onion.csr -signkey /etc/ssl/nginx/$onion.key -out /etc/ssl/nginx/$onion.crt
fi

service php5-fpm restart
service nginx restart

#Java
apt-get install openjdk-7-jre-headless

#Yacy
echo "On ask, 300Mb"
waitakey
apt-get install yacy


hn="$(cat /var/lib/tor/hidden_service/yacy/hostname 2>/dev/null)"
echo "server {
        listen yacy.local:80;
        server_name yacy.local;

location / {
    proxy_pass       http://127.0.0.1:8090;
    proxy_set_header Host      \$host;
    proxy_set_header X-Real-IP \$remote_addr;
  }

}

server {
        listen $hn:80;
        server_name $hn;

location / {
    proxy_pass       http://127.0.0.1:8090;
    proxy_set_header Host      \$host;
    proxy_set_header X-Real-IP \$remote_addr;
  }

}" > /etc/nginx/sites-enabled/yacy 

#tahoe
apt-get install i2p-tahoe-lafs

echo 'AUTOSTART="i2p"' > /etc/default/tahoe-lafs 

[ -z "$(grep tahoelafs /etc/group)" ] && addgroup --system tahoelafs
[ -z "$(grep tahoelafs /etc/passwd)" ] && adduser --disabled-login --system --home /var/lib/tahoe-lafs --shell /bin/bash --no-create-home --ingroup tahoelafs tahoelafs
mkdir /var/lib/tahoe-lafs/ -p


chown tahoelafs:tahoelafs /var/lib/tahoe-lafs -R
tahoe create-node /var/lib/tahoe-lafs/i2p/

echo 'pb://c6w5ernw7y7rp3uwmdyu5clujyt2y4m4@w2zrwz5gplkkufix7cb4gmxfbrkwg2abnsgk62bm5iifzlahe7kq.b32.i2p/introducer
pb://exupps5kk3amc5iq4q6f5ahggkm4s5fl@oj7cffq5fnk46iw3i3h2sdgncxrqbxm7wh6i4h2cbpmqsydygkcq.b32.i2p/introducer
pb://md2tltfmdjvzptg4mznha5zktaxatpmz@5nrsgknvztikjxnpvidlokquojjlsudf7xlnrnyobj7e7trdmuta.b32.i2p/introducer
pb://fmcbgy7zd6ubrbphilmrlocvb7f327z5@gdr3tt5uewgnm7r7xn54k2qikf2kuwwegjjsnkz44pjticcacsua.b32.i2p/introducer
pb://tq7rx35yopkvodmsxkqra4qqkbho3yaa@6ga2r2h2fyq6tzcyh6bf3hpio3i7r4edadbq7l4wnh4y62taj6ia.b32.i2p/introducer
pb://cys5w43lvx3oi5lbgk6liet6rbguekuo@sagljtwlctcoktizkmyv3nyjsuygty6tpkn5riwxlruh3f2oze2q.b32.i2p/introducer
pb://r3bs6joub24gtsofe7ohnnjcnwfmo2jy@qaihdh5z7osn7tc3326ahv3z46badiuaulff43wchmap7skg7euq.b32.i2p/42mrbm7zxmjemz6hzejo3i7aunx4eoun' > /var/lib/tahoe-lafs/i2p/introducers



echo "Point your browser to http://i2p.local/i2ptunnel/wizard"
echo " Server Tunnel > Standard > tahoe/tahoe > 127.0.0.1:3459 > autostart"
echo
echo "Then point to http://i2p.local/i2ptunnelmgr"
echo " and get base32 URL to put in   tub.location ="
echo "This process can be 5 minutes long. Wait"
echo
waitakey

echo "Change config"
echo "[node]
nickname = yourpreferednick
web.port = tcp:3456:interface=127.0.0.1
web.static = public_html
http_proxy = 127.0.0.1:4444
tub.port = 3459
tub.location= %base32TUB.LOCATION%
[storage]
enabled = true
reserved_space = 20G
[helper]
enabled = true"

waitakey

nano /var/lib/tahoe-lafs/i2p/tahoe.cfg

chown tahoelafs:tahoelafs /var/lib/tahoe-lafs -R

service tahoe-lafs restart

echo 'server {
        listen tahoe.local:80;
        server_name tahoe.local;


location / {
    proxy_pass       http://127.0.0.1:3456;
    proxy_set_header Host      $host;
    proxy_set_header X-Real-IP $remote_addr;
  }

}' > /etc/nginx/sites-enabled/tahoe


service nginx restart

#phpmyadmin
echo "If it's asked for a webserver, do not mark any"
waitakey
apt-get install phpmyadmin

echo 'server {
  listen communitycube.local:80;
  server_name communitycube.local;
        location /phpmyadmin {
               root /usr/share/;
               index index.php index.html index.htm;
               location ~ ^/phpmyadmin/(.+\.php)$ {
                       try_files $uri =404;
                       root /usr/share/;
                       fastcgi_pass 127.0.0.1:9000;
                       fastcgi_index index.php;
                       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                       include /etc/nginx/fastcgi_params;
               }
               location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
                       root /usr/share/;
               }
        }
        location /phpMyAdmin {
               rewrite ^/* /phpmyadmin last;
        }
}' > /etc/nginx/sites-enabled/phpmyadmin

service nginx restart

#friendica
apt-get install php5 mysql-server php5-curl php5-gd php5-mysql php5-imap smarty3 git

if [ ! -e  /var/www/friendica ]; then
mysql -u root -proot
CREATE DATABASE frndc;
grant all privileges on frndc.* to  friendica@localhost  identified by 'SuperPass8Wor1_2';

cd /var/www
git clone https://github.com/friendica/friendica.git
cd friendica
git clone https://github.com/friendica/friendica-addons.git addon

chown -R www-data:www-data /var/www/friendica/view/smarty3
chmod g+w /var/www/friendica/view/smarty3
touch /var/www/friendica/.htconfig.php
chown www-data:www-data /var/www/friendica/.htconfig.php
chmod g+rwx /var/www/friendica/.htconfig.php

fi

if [ -z "$(grep "friendica/include/poller" /etc/crontab)" ]; then
    echo '*/10 * * * * /usr/bin/php /var/www/friendica/include/poller.php' >> /etc/crontab
fi

onion="$(cat /var/lib/tor/hidden_service/friendica/hostname 2>/dev/null)"
if [ ! -e /etc/ssl/nginx/$onion.key -o ! -e /etc/ssl/nginx/$onion.csr -o ! -e  /etc/ssl/nginx/$onion.crt ]; then
    openssl genrsa -des3 -out /etc/ssl/nginx/$onion.key 2048
    openssl req -new -key /etc/ssl/nginx/$onion.key -out /etc/ssl/nginx/$onion.csr
    cp /etc/ssl/nginx/$onion.key /etc/ssl/nginx/$onion.key.org
    openssl rsa -in /etc/ssl/nginx/$onion.key.org -out /etc/ssl/nginx/$onion.key
    openssl x509 -req -days 365 -in /etc/ssl/nginx/$onion.csr -signkey /etc/ssl/nginx/$onion.key -out /etc/ssl/nginx/$onion.crt
fi

cat << EOF > /etc/nginx/sites-enabled/friendica 

server {
  listen $onion:8181;
  server_name $onion;
  return 301 https://\$server_name\$request_uri;
  }

server {
  listen friendica.local:80;
  server_name friendica.local;
  return 301 https://\$server_name\$request_uri;
  }
  
server {
  listen 443;
  ssl on;
  server_name $onion;
  ssl_certificate /etc/ssl/nginx/$onion.crt;
  ssl_certificate_key /etc/ssl/nginx/$onion.key;

  root /var/www/friendica/;
  index index.php;
  
  location / {

    
    if (!-f \$request_filename) {
      rewrite ^/(.+)$ /index.php?q=\$1 last;
    }
    try_files \$uri \$uri/ =404;
  }

  location ~* \.php {
    include fastcgi_params;
    fastcgi_split_path_info ^(.+\.php)(/.+)\$;
    fastcgi_param HTTPS on;
    fastcgi_index index.php;
    fastcgi_pass 127.0.0.1:9000;
    try_files \$uri \$uri/ =404;
  }

  location ~ \..*/.*\.php$ {
    return 403;
  }

}
EOF

#html
mkdir -p /var/www/html
rm -f /var/www/html/index.html
for i in $(ls /var/lib/tor/hidden_service/)
do

hn="$(cat /var/lib/tor/hidden_service/$i/hostname 2>/dev/null)"

cat << EOF >> /var/www/html/index.html
<a href="http://$hn">$i</a>
EOF
done




echo '<a href="http://tahoe.local">tahoe</a>' >> /var/www/html/index.html
echo '<a href="http://i2p.local">i2p</a>' >> /var/www/html/index.html
echo '<a href="http://communitycube.local/phpmyadmin">phpmyadmin</a>' >> /var/www/html/index.html